#include <iostream>
using namespace std;

void heapify(int a[], int i, int n){
    int l = 2*i+1;
    int r =2*i + 2;
    int maxi = i;
    
    // If left child is larger than root
    if(l < n && a[maxi] < a[l]){
        maxi = l;
    }
    
    // If right child is larger than largest so far
    if(r < n && a[maxi] < a[r]){
        maxi = r;
    }
    
    // Recursively heapify the affected sub-tree
    if(maxi != i){
        swap(a[maxi], a[i]);
        heapify(a, maxi, n);
    }
}

void heapSort(int a[], int n){
    // Build heap (rearrange array)
    for(int i=(n/2 -1);i>=0;i--){
        heapify(a, i, n);
    }
    for(int i=n-1;i>=0;i--){
        swap(a[0], a[i]);// Move current root to end
        heapify(a,0,i);// call max heapify on the reduced heap
    }
}

void print(int a[], int n){
    for(int i=0;i<n;i++){
        cout<<a[i]<<" ";
    }
}

int main(){
    int a[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(a)/sizeof(a[0]);
    heapSort(a,n);
    print(a,n);
    return 0;
}

