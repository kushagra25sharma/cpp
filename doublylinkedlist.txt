#include<iostream>
#include<stdlib.h>
using namespace std;
struct Node{
    int n;
    struct Node* next;
    struct Node* prev;
};
void add(int data,struct Node** head){
    struct Node* newn = (struct Node*) malloc(sizeof(struct Node));
    newn->n = data;
    newn->next = *head;
    newn->prev = NULL;
    if(*head != NULL){
        (*head)->prev = newn;
    }
    *head = newn;
  
}
void add2(int data,struct Node** head){
    struct Node* newn = (struct Node*) malloc(sizeof(struct Node*));
    newn->n = data;
    newn->next = NULL;
    if(*head == NULL){
        newn->prev = NULL;
        *head = newn;
    }else{
        struct Node* last = *head;
        while(last->next != NULL){
            last = last->next;
        }
        last->next= newn;
        newn->prev = last;
    }
}

int size(struct Node* head){
    struct Node* first = head;
    int count=0;
    while(first != NULL){
        first = first->next;
        count++;
    }
    return count;
}

void cut(int pos,struct Node** head){
    if(pos > size(*head)){
        cout<<"invalid pos"<<endl;
    }
    else if(*head == NULL){
        cout<<"list empty"<<endl;
    }
    else{
        struct Node* last = *head;
        for(int i=1;i<pos;i++){
            last = last->next;
        }
        if(last->next != NULL && last->prev != NULL){
            last->next->prev = last->prev;
            last->prev->next = last->next;
        }
        else if(last->next != NULL && last->prev == NULL){
            last->next->prev = NULL;
            *head = last->next;
        }
        else if(last->next == NULL && last->prev == NULL){
            *head = NULL;
        }
        else{
            last->prev->next = NULL;
        }
        free(last);
    }
    
}

void print(struct Node* head){
    struct Node* p = head;
    if(p){
    while(p){
        cout<<p->n<<" ";
        p =p->next;
    }
    }else{
        cout<<"list is empty no elements to display";
    }
    cout<<endl;
    
}
int main() {            
	struct Node* head = NULL;
	add2(3,&head);
	add2(7,&head);
	add2(14,&head);
	add2(156,&head);
	print(head);
	cut(2,&head);
	cut(5,&head);
	print(head);
	cut(1,&head);
	cut(1,&head);
	print(head);//1 element
	cut(1,&head);
	print(head);//empty
	cut(1,&head);//delete on empty list;
	print(head);
	add2(34,&head);
	add(45,&head);
	print(head);
	return 0;
}