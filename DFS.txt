#include<bits/stdc++.h>
using namespace std;

class Graph{
    int v;
    list<int> *adj;
public:
    Graph(int v);
    void add(int u,int w);
    void DFSrecur(int s,bool visited[]);
    void DFS(int s);
};

Graph :: Graph(int v){
    this->v = v;
    adj = new list<int>[v];
}

void Graph :: add(int u,int w){
    adj[u].push_back(w);
}

void Graph :: DFSrecur(int s,bool visited[]){
    visited[s] = true;
    cout<<s<<" ";
    list<int> :: iterator i;
    for(i = adj[s].begin();i != adj[s].end();i++){
        if(!visited[*i]){
            DFSrecur(*i,visited);
        }
    }
}

void Graph :: DFS(int s){
    bool *visited = new bool [v];
    for(int i=0;i<v;i++){
        visited[i] = false;
    }
    
    DFSrecur(s,visited);
}

int main(){
    Graph g(4); 
    g.add(0, 1); 
    g.add(0, 2); 
    g.add(1, 2); 
    g.add(2, 0); 
    g.add(2, 3); 
    g.add(3, 3); 
  
    cout << "Following is Depth First Traversal"
            " (starting from vertex 2) \n"; 
    g.DFS(2);
    return 0;
}