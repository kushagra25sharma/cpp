#include <bits/stdc++.h>
using namespace std;

void badCharHeuristic(string pat,int m,int badchar[]){
    // Initialize all occurrences as -1 
    for(int i=0;i<256;i++){
        badchar[i] = -1;
    }
     // Fill the actual value of last occurrence  
    // of a character  
    for(int i=0;i<m;i++){
        badchar[(int)pat[i]] = i;
    }
}

void search(string txt,string pat){
    int m = pat.size();
    int n = txt.size();
    
    int badchar[256];
    badCharHeuristic(pat,m,badchar);
    int s =0;
    while(s <= (n-m)){
        int j = m-1;
         /* Keep reducing index j of pattern while  
        characters of pattern and text are  
        matching at this shift s */
        while(pat[j] == txt[s+j] && j>=0){
            j--;
        }
        /* If the pattern is present at current  
        shift, then index j will become -1 after  
        the above loop */
        if(j<0){
            cout<<"pattern found at index "<<s<<endl;
            /* Shift the pattern so that the next  
            character in text aligns with the last  
            occurrence of it in pattern.  
            The condition s+m < n is necessary for  
            the case when pattern occurs at the end  
            of text */
            s += (s+m < n)? m - badchar[txt[s+m]]:1;
        }
        else{
            /* Shift the pattern so that the bad character  
            in text aligns with the last occurrence of  
            it in pattern. The max function is used to  
            make sure that we get a positive shift.  
            We may get a negative shift if the last  
            occurrence of bad character in pattern  
            is on the right side of the current  
            character. */
            s += max(1,badchar[txt[s+j]]);
        }
    }
}

int main() {
   string txt = "ABCAABCD";
   string pat = "ABC";
   search(txt,pat);
   return 0;
}
