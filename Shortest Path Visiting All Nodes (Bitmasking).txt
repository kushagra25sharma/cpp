class Solution {
public:
    // Shortest Path visiting all nodes Leetcode
    int shortestPathLength(vector<vector<int>>& graph) {
        int n = graph.size();
        int ans = (1<<n) - 1; // if n=4 ans = 1111 that means all nodes are visited 101111 means only 4th node is not visited (0-based indexing right to left
        vector<vector<int>> visited(n, vector<int> (1<<n));// 1 << n = 2^n, so we create matrix [n][2^n] where row index corresponds to node in the original graph, and column index is a bitmask(state) for particular node
        int cnt=0;// length of the minimum path
        queue<pair<int, int>> q; // currNode and bitmask
        for(int i=0;i<n;i++){
            q.push({i, 1<<i});//the bitmask for each node is initialized with only its own bit set to
        }
        // we will do bfs from each node simultaneously
        while(q.size()){
            int sz = q.size();
            while(sz){
                sz--;
                pair<int, int> p = q.front();
                q.pop();
                if(p.second == ans){//found a full set of 1s meaning we visited all graph nodes from the current node
                    return cnt;
                }
                if(visited[p.first][p.second]){
                    continue;
                }
                visited[p.first][p.second] = 1;
                //for each neighbour of current node set neighbour's bit in current node's bitmask
                for(auto x : graph[p.first]){
                    q.push({x, p.second | (1 << x)});// setting xth bit 1 in mask p.second
                }
            }
            cnt++;
        }
        return -1;
    }
}; 