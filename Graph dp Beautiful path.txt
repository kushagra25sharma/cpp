// best time complexity
class Solution {
public:
    int largestPathValue(string colors, vector<vector<int>>& edges) {
        vector<int> v[colors.size()];
        vector<int> cnt[colors.size()];
        vector<int> no(26, 0);
        vector<int> indegree(colors.size());
        int vis = 0, ans = 0;
        queue<int> q;
        for(int i=0;i<edges.size();i++){
            v[edges[i][0]].push_back(edges[i][1]);
            indegree[edges[i][1]]++;
        }
        for(int i=0;i<colors.size();i++){
            cnt[i] = no;
            if(indegree[i] == 0){
                q.push(i);
                cnt[i][colors[i] - 'a'] = 1;
            }
        }
        while(q.size()){
            int num = q.front();
            q.pop();
            vis++;
            ans = max(ans, *max_element(cnt[num].begin(), cnt[num].end()));
            for(auto x : v[num]){
                for(int j=0;j<26;j++){
                    cnt[x][j] = max(cnt[x][j], cnt[num][j] + (j == (colors[x] - 'a')));
                }
                indegree[x]--;
                if(indegree[x] == 0){
                    q.push(x);
                }
            }
        }
        if(vis < colors.size()){
            return -1;
        }
        else{
            return ans;
        }
    }
};

//////////////////////////////////////////////////////////////////////////////////////////////// other way higher time complexity

#include <bits/stdc++.h>
using namespace std;
#define ll long long
string s;
int ans = 0;
vector<int> v[300005], cycle(300005,0), vis(300005, 0);
int dp[300005][26];
// D. Substring ROUND 460 DIV 2

void solve(int num){
    vis[num] = cycle[num] = 1;
    for(auto x : v[num]){
        if(cycle[x]){
            cout<<"-1";
            exit(0);
        }
        if(!vis[x]){
            solve(x);
        }
        for(int i=0;i<26;i++){
            dp[num][i] = max(dp[num][i], dp[x][i]);
        }
    }
    dp[num][s[num-1] - 'a']++;
    for(int i=0;i<26;i++){
        ans = max(ans, dp[num][i]);
    }
    cycle[num] = 0;
}

int main() {
	ios_base :: sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int n,m;
    cin>>n>>m;
    cin>>s;
    for(int i=0;i<m;i++){
        int x,y;
        cin>>x>>y;
        //if(x != y){
            v[x].push_back(y);
        //}
    }
    for(int i=1;i<=n;i++){
        if(!vis[i]){
            solve(i);
        }
    }
    //cout<<ans;
    for(int i=1;i<=5;i++){
        for(int j=0;j<26;j++){
            cout<<dp[i][j]<<" ";
        }
        cout<<"\n";
    }
	return 0;
}