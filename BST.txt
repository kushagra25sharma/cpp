#include<bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    struct Node*left,*right;
    Node(int data){
        this->data = data;
        left = right = NULL;
    }
};

void Insert(struct Node** root,int val){
    if(*root == NULL){
        *root = new Node(val);
    }
    else if(val > (*root)->data){
         Insert(&(*root)->right,val);
    }
    else{
         Insert(&(*root)->left,val);
    }
}

void preorder(struct Node* root){
    if(root == NULL){
        return;
    }
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}

void inorder(struct Node* root){
    if(root == NULL){
        return;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}
struct Node* search(struct Node* root,int key){
    if(root == NULL){
        cout<<"no node"<<endl;
        return NULL;
    }
    if(key == root->data){
        cout<<"present"<<endl;
        return root;
    }
    else if(key > root->data){
        search(root->right,key);
    }
    else{
        search(root->left,key);
    }
}

struct Node* minValueNode(struct Node* node){

    struct Node* current = node;
    while(current && current->left != NULL)
    current = current->left;
    return current;
}

struct Node* deletenode(struct Node* root,int value){
    if(root == NULL){
        return root;
    }
    
    if(root->data > value){
        root->left = deletenode(root->left,value);
    }
    else if(root->data < value){
        root->right = deletenode(root->right,value);
    }
    else{//if value equals to root->data
        if(root->right == NULL){//case if either right child = null or both = null ,1 or no child
           struct Node* temp = root->left;
           delete(root);
           return temp;
        }
        else if(root->left == NULL){//case for left child =null and right is not null ,1 child
           struct Node* temp = root->right;
           delete(root);
           return temp;
        }
        else{//if node has both child
           struct Node* temp = minValueNode(root->right);
           root->data = temp->data;
           root->right = deletenode(root->right,temp->data);
        }
    }
    return root;
}

int main(){
    struct Node* root = NULL;
    Insert(&root,50);
    Insert(&root, 30); 
    Insert(&root, 20); 
    Insert(&root, 40); 
    Insert(&root, 70); 
    Insert(&root, 60); 
    Insert(&root, 80); 
    search(root,50);
    search(root,76);
    search(root,20);
    search(root,34);
    search(root,60);
    Insert(&root,34);
   preorder(root); 
    cout<<endl;
   inorder(root);
   cout<<"--------------";
 cout<<endl;
    deletenode(root,51);
    inorder(root);
    cout<<endl;
    deletenode(root,40);
    inorder(root);
    cout<<endl;
   deletenode(root,50);
   cout<<"----------------"<<endl;
   inorder(root);
   cout<<endl;
   cout<<"==============================="<<endl;
   deletenode(root,51);
   inorder(root);
   cout<<endl;
   deletenode(root,60);
   inorder(root);
    return 0;
}
